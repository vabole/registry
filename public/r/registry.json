{
  "$schema": "https://ui.shadcn.com/schema/registry.json",
  "name": "vabole",
  "homepage": "https://registry-pi-black.vercel.app",
  "items": [
    {
      "name": "clerk-convex-starter",
      "type": "registry:block",
      "title": "Clerk + Convex Starter",
      "description": "Complete Next.js starter with Clerk authentication and Convex backend. Includes auth UI, real-time database, and example queries.",
      "dependencies": [
        "@clerk/nextjs",
        "convex",
        "convex-helpers"
      ],
      "registryDependencies": [],
      "files": [
        {
          "path": "registry/new-york/blocks/clerk-convex-starter/layout.tsx",
          "type": "registry:page",
          "target": "app/layout.tsx",
          "content": "import type { Metadata } from \"next\";\nimport { Geist, Geist_Mono } from \"next/font/google\";\nimport { ClerkProvider } from \"@clerk/nextjs\";\nimport ConvexClientProvider from \"@/components/convex-client-provider\";\nimport \"./globals.css\";\n\nconst geistSans = Geist({\n  variable: \"--font-geist-sans\",\n  subsets: [\"latin\"],\n});\n\nconst geistMono = Geist_Mono({\n  variable: \"--font-geist-mono\",\n  subsets: [\"latin\"],\n});\n\nexport const metadata: Metadata = {\n  title: \"Clerk + Convex Starter\",\n  description: \"A Next.js app with Clerk authentication and Convex backend\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body\n        className={`${geistSans.variable} ${geistMono.variable} antialiased`}\n      >\n        <ClerkProvider>\n          <ConvexClientProvider>{children}</ConvexClientProvider>\n        </ClerkProvider>\n      </body>\n    </html>\n  );\n}\n"
        },
        {
          "path": "registry/new-york/blocks/clerk-convex-starter/page.tsx",
          "type": "registry:page",
          "target": "app/page.tsx",
          "content": "'use client'\n\nimport { SignInButton, SignedIn, SignedOut, UserButton } from '@clerk/nextjs'\nimport { useConvexAuth, useQuery, useMutation } from 'convex/react'\nimport { api } from '@/convex/_generated/api'\nimport { FormEvent, useEffect, useMemo, useState } from 'react'\n\nexport default function Home() {\n  const { isAuthenticated, isLoading } = useConvexAuth()\n  const ensureUser = useMutation(api.users.ensure)\n  const sendMessage = useMutation(api.messages.send)\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      void ensureUser({})\n    }\n  }, [ensureUser, isAuthenticated])\n\n  const myMessages = useQuery(\n    api.messages.getForCurrentUser,\n    isAuthenticated ? {} : 'skip'\n  )\n  const recentMessages = useQuery(api.messages.list)\n\n  const [messageText, setMessageText] = useState('')\n  const canSend = useMemo(\n    () => Boolean(messageText.trim()) && isAuthenticated,\n    [messageText, isAuthenticated]\n  )\n\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n    if (!canSend) return\n    await sendMessage({ body: messageText.trim() })\n    setMessageText('')\n  }\n\n  return (\n    <main className=\"max-w-4xl mx-auto flex flex-col min-h-svh px-4 py-12 gap-10\">\n      <section className=\"rounded-xl border bg-card p-8 shadow-sm\">\n        <div className=\"flex flex-col gap-6\">\n          <header className=\"flex flex-col gap-2\">\n            <h1 className=\"text-3xl font-bold tracking-tight\">\n              Clerk + Convex Starter\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Authenticate with Clerk and create realtime data with Convex. This\n              starter keeps the UI minimal so you can focus on wiring the two\n              services together.\n            </p>\n          </header>\n\n          <div className=\"flex items-center justify-between rounded-lg border bg-muted/40 p-4\">\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">\n                Authentication\n              </p>\n              <SignedIn>\n                <p className=\"text-sm\">You are signed in with Clerk.</p>\n              </SignedIn>\n              <SignedOut>\n                <p className=\"text-sm\">\n                  Use the button to create an account or sign in.\n                </p>\n              </SignedOut>\n            </div>\n            <SignedOut>\n              <SignInButton mode=\"modal\">\n                <button className=\"rounded-md bg-primary px-4 py-2 text-sm font-medium text-primary-foreground shadow hover:bg-primary/90\">\n                  Sign in\n                </button>\n              </SignInButton>\n            </SignedOut>\n            <SignedIn>\n              <UserButton afterSignOutUrl=\"/\" />\n            </SignedIn>\n          </div>\n\n          <SignedIn>\n            <ConvexConnectionState\n              isLoading={isLoading}\n              isAuthenticated={isAuthenticated}\n            />\n          </SignedIn>\n        </div>\n      </section>\n\n      <SignedIn>\n        <section className=\"grid gap-6 md:grid-cols-2\">\n          <article className=\"rounded-xl border bg-card p-6 shadow-sm\">\n            <header className=\"mb-4 space-y-1\">\n              <h2 className=\"text-xl font-semibold\">Create a message</h2>\n              <p className=\"text-sm text-muted-foreground\">\n                This mutation writes to Convex using your authenticated user\n                record.\n              </p>\n            </header>\n\n            <form onSubmit={handleSubmit} className=\"flex flex-col gap-3\">\n              <label className=\"text-sm font-medium text-muted-foreground\" htmlFor=\"message\">\n                Message\n              </label>\n              <input\n                id=\"message\"\n                type=\"text\"\n                value={messageText}\n                onChange={(event) => setMessageText(event.target.value)}\n                placeholder=\"Type a short note\u2026\"\n                className=\"rounded-md border px-3 py-2 text-sm shadow-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\"\n              />\n              <div className=\"flex justify-end\">\n                <button\n                  type=\"submit\"\n                  disabled={!canSend}\n                  className=\"inline-flex items-center rounded-md bg-primary px-4 py-2 text-sm font-medium text-primary-foreground shadow hover:bg-primary/90 disabled:cursor-not-allowed disabled:opacity-60\"\n                >\n                  Save to Convex\n                </button>\n              </div>\n            </form>\n          </article>\n\n          <article className=\"rounded-xl border bg-card p-6 shadow-sm\">\n            <header className=\"mb-4 space-y-1\">\n              <h2 className=\"text-xl font-semibold\">Your messages</h2>\n              <p className=\"text-sm text-muted-foreground\">\n                These results come from the authenticated query{' '}\n                <code className=\"rounded bg-muted px-1 py-0.5 text-xs\">\n                  messages.getForCurrentUser\n                </code>\n                .\n              </p>\n            </header>\n            <MessageList\n              emptyLabel=\"No personal messages yet. Create one above.\"\n              messages={myMessages ?? []}\n            />\n          </article>\n\n          <article className=\"rounded-xl border bg-card p-6 shadow-sm md:col-span-2\">\n            <header className=\"mb-4 space-y-1\">\n              <h2 className=\"text-xl font-semibold\">Latest messages</h2>\n              <p className=\"text-sm text-muted-foreground\">\n                Everyone signed in through Clerk can see this list update in\n                realtime through Convex.\n              </p>\n            </header>\n            <MessageList\n              emptyLabel=\"No messages have been created yet.\"\n              messages={recentMessages ?? []}\n            />\n          </article>\n        </section>\n      </SignedIn>\n    </main>\n  )\n}\n\ntype ConvexAuthStateProps = {\n  isAuthenticated: boolean\n  isLoading: boolean\n}\n\nfunction ConvexConnectionState({ isAuthenticated, isLoading }: ConvexAuthStateProps) {\n  if (isLoading) {\n    return (\n      <div className=\"rounded-lg border bg-muted/40 p-4 text-sm text-muted-foreground\">\n        Checking Convex session\u2026\n      </div>\n    )\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"rounded-lg border bg-muted/40 p-4 text-sm text-muted-foreground\">\n        Convex is waiting for a verified Clerk JWT. Confirm you have set{' '}\n        <code className=\"rounded bg-muted px-1 py-0.5 text-xs\">CLERK_JWT_ISSUER_DOMAIN</code>{' '}\n        and synced <code className=\"rounded bg-muted px-1 py-0.5 text-xs\">convex/auth.config.js</code>{' '}\n        with <code className=\"rounded bg-muted px-1 py-0.5 text-xs\">pnpx convex dev</code>.\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"rounded-lg border bg-emerald-500/10 p-4 text-sm font-medium text-emerald-900 dark:text-emerald-200\">\n      Convex is authenticated. Your Clerk account can now call queries and mutations.\n    </div>\n  )\n}\n\ntype MessageListProps = {\n  messages: Array<{\n    _id: string\n    body: string\n    authorName?: string | null\n  }>\n  emptyLabel: string\n}\n\nfunction MessageList({ messages, emptyLabel }: MessageListProps) {\n  if (messages.length === 0) {\n    return <p className=\"text-sm text-muted-foreground\">{emptyLabel}</p>\n  }\n\n  return (\n    <ul className=\"space-y-3\">\n      {messages.map((message) => (\n        <li key={message._id} className=\"rounded-lg border bg-background p-3 shadow-sm\">\n          <p className=\"text-sm\">{message.body}</p>\n          {message.authorName && (\n            <p className=\"mt-2 text-xs text-muted-foreground\">\n              Posted by {message.authorName}\n            </p>\n          )}\n        </li>\n      ))}\n    </ul>\n  )\n}\n"
        },
        {
          "path": "registry/new-york/blocks/clerk-convex-starter/middleware.ts",
          "type": "registry:file",
          "target": "middleware.ts"
        },
        {
          "path": "registry/new-york/blocks/clerk-convex-starter/convex-client-provider.tsx",
          "type": "registry:component",
          "target": "components/convex-client-provider.tsx",
          "content": "'use client'\n\nimport { ReactNode } from 'react'\nimport { ConvexReactClient } from 'convex/react'\nimport { ConvexProviderWithClerk } from 'convex/react-clerk'\nimport { useAuth } from '@clerk/nextjs'\n\nif (!process.env.NEXT_PUBLIC_CONVEX_URL) {\n  throw new Error('Missing NEXT_PUBLIC_CONVEX_URL in your .env file')\n}\n\nconst convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL)\n\nexport default function ConvexClientProvider({ children }: { children: ReactNode }) {\n  return (\n    <ConvexProviderWithClerk client={convex} useAuth={useAuth}>\n      {children}\n    </ConvexProviderWithClerk>\n  )\n}\n"
        },
        {
          "path": "registry/new-york/blocks/clerk-convex-starter/convex/auth.config.js",
          "type": "registry:file",
          "target": "convex/auth.config.js",
          "content": "export default {\n  providers: [\n    {\n      domain: process.env.CLERK_JWT_ISSUER_DOMAIN,\n      applicationID: 'convex',\n    },\n  ],\n}\n"
        },
        {
          "path": "registry/new-york/blocks/clerk-convex-starter/convex/schema.ts",
          "type": "registry:file",
          "target": "convex/schema.ts",
          "content": "import { defineSchema, defineTable } from 'convex/server'\nimport { v } from 'convex/values'\n\nexport default defineSchema({\n  users: defineTable({\n    clerkId: v.string(),\n    email: v.optional(v.string()),\n    name: v.optional(v.string()),\n    imageUrl: v.optional(v.string()),\n  }).index('by_clerkId', ['clerkId']),\n  messages: defineTable({\n    body: v.string(),\n    authorId: v.string(),\n    authorName: v.optional(v.string()),\n  }).index('by_authorId', ['authorId']),\n})\n"
        },
        {
          "path": "registry/new-york/blocks/clerk-convex-starter/convex/messages.ts",
          "type": "registry:file",
          "target": "convex/messages.ts",
          "content": "import { v } from 'convex/values'\nimport { query, mutation } from './_generated/server'\n\nexport const getForCurrentUser = query({\n  args: {},\n  handler: async (ctx) => {\n    const identity = await ctx.auth.getUserIdentity()\n    if (!identity) {\n      throw new Error('Not authenticated')\n    }\n\n    return await ctx.db\n      .query('messages')\n      .withIndex('by_authorId', (q) => q.eq('authorId', identity.subject))\n      .order('desc')\n      .take(100)\n  },\n})\n\nexport const send = mutation({\n  args: { body: v.string() },\n  handler: async (ctx, args) => {\n    const identity = await ctx.auth.getUserIdentity()\n    if (!identity) {\n      throw new Error('Not authenticated')\n    }\n\n    const userRecord = await ctx.db\n      .query('users')\n      .withIndex('by_clerkId', (q) => q.eq('clerkId', identity.subject))\n      .unique()\n\n    await ctx.db.insert('messages', {\n      body: args.body,\n      authorId: identity.subject,\n      authorName: userRecord?.name ?? identity.name ?? 'Anonymous',\n    })\n  },\n})\n\nexport const list = query({\n  args: {},\n  handler: async (ctx) => {\n    return await ctx.db.query('messages').order('desc').take(100)\n  },\n})\n"
        },
        {
          "path": "registry/new-york/blocks/clerk-convex-starter/convex/users.ts",
          "type": "registry:file",
          "target": "convex/users.ts",
          "content": "import { mutation } from './_generated/server'\n\nexport const ensure = mutation({\n  args: {},\n  handler: async (ctx) => {\n    const identity = await ctx.auth.getUserIdentity()\n    if (!identity) {\n      throw new Error('Not authenticated')\n    }\n\n    const userData = {\n      clerkId: identity.subject,\n      email: identity.email ?? undefined,\n      name: identity.name ?? undefined,\n      imageUrl: identity.pictureUrl ?? undefined,\n    }\n\n    const existing = await ctx.db\n      .query('users')\n      .withIndex('by_clerkId', (q) => q.eq('clerkId', identity.subject))\n      .unique()\n\n    if (!existing) {\n      await ctx.db.insert('users', userData)\n      return\n    }\n\n    await ctx.db.patch(existing._id, userData)\n  },\n})\n"
        },
        {
          "path": "registry/new-york/blocks/clerk-convex-starter/convex/tsconfig.json",
          "type": "registry:file",
          "target": "convex/tsconfig.json"
        },
        {
          "path": "registry/new-york/blocks/clerk-convex-starter/env.example",
          "type": "registry:file",
          "target": ".env.example",
          "content": "# Clerk Authentication\n# Get these from https://dashboard.clerk.com\nNEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_...\nCLERK_SECRET_KEY=sk_test_...\n\n# Clerk JWT issuer domain (from the Convex-specific JWT template)\n# In development: https://verb-noun-00.clerk.accounts.dev\n# In production: https://clerk.<your-domain>.com\nCLERK_JWT_ISSUER_DOMAIN=https://your-app.clerk.accounts.dev\n\n# Convex requires the Clerk JWT template audience to be \"convex\"\n# Set this when configuring your Clerk JWT template:\n# {\n#   \"aud\": \"convex\"\n# }\n\n# Convex\n# Get this from https://dashboard.convex.dev\nNEXT_PUBLIC_CONVEX_URL=https://your-deployment.convex.cloud\n"
        }
      ],
      "envVars": {
        "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY": "pk_test_...",
        "CLERK_SECRET_KEY": "sk_test_...",
        "CLERK_JWT_ISSUER_DOMAIN": "https://your-app.clerk.accounts.dev",
        "NEXT_PUBLIC_CONVEX_URL": "https://your-deployment.convex.cloud"
      },
      "docs": "https://clerk.com/docs/guides/development/integrations/databases/convex"
    },
    {
      "name": "clerk-quickstart",
      "type": "registry:block",
      "title": "Clerk Next.js Quickstart (App Router)",
      "description": "Complete authentication setup with Clerk for Next.js App Router. Includes sign-in/sign-up pages, middleware, header with auth buttons, and dark mode support.",
      "dependencies": [
        "@clerk/nextjs",
        "@clerk/themes",
        "next-themes",
        "lucide-react"
      ],
      "registryDependencies": [
        "button"
      ],
      "files": [
        {
          "path": "registry/new-york/blocks/clerk-quickstart/layouts/layout-with-header.tsx",
          "type": "registry:page",
          "target": "app/layout.tsx"
        },
        {
          "path": "registry/new-york/blocks/clerk-quickstart/pages/sign-in-page.tsx",
          "type": "registry:page",
          "target": "app/sign-in/[[...sign-in]]/page.tsx"
        },
        {
          "path": "registry/new-york/blocks/clerk-quickstart/pages/sign-up-page.tsx",
          "type": "registry:page",
          "target": "app/sign-up/[[...sign-up]]/page.tsx"
        },
        {
          "path": "registry/new-york/blocks/clerk-quickstart/files/middleware.ts",
          "type": "registry:file",
          "target": "src/middleware.ts"
        },
        {
          "path": "registry/new-york/blocks/clerk-quickstart/components/clerk-provider.tsx",
          "type": "registry:component"
        },
        {
          "path": "registry/new-york/blocks/clerk-quickstart/components/header.tsx",
          "type": "registry:component"
        },
        {
          "path": "registry/new-york/blocks/clerk-quickstart/components/theme-provider.tsx",
          "type": "registry:component"
        }
      ],
      "css": {
        "@import \"@clerk/themes/shadcn.css\"": {}
      },
      "envVars": {
        "NEXT_PUBLIC_CLERK_SIGN_IN_URL": "/sign-in",
        "NEXT_PUBLIC_CLERK_SIGN_UP_URL": "/sign-up"
      },
      "docs": "https://clerk.com/docs/quickstarts/nextjs"
    },
    {
      "name": "hello-world",
      "type": "registry:component",
      "title": "Hello World",
      "description": "A simple hello world component",
      "registryDependencies": [
        "button"
      ],
      "files": [
        {
          "path": "registry/new-york/blocks/hello-world/hello-world.tsx",
          "type": "registry:component"
        }
      ]
    },
    {
      "name": "example-form",
      "type": "registry:component",
      "title": "Example Form",
      "description": "A contact form with Zod validation.",
      "dependencies": [
        "zod"
      ],
      "registryDependencies": [
        "button",
        "input",
        "label",
        "textarea",
        "card"
      ],
      "files": [
        {
          "path": "registry/new-york/blocks/example-form/example-form.tsx",
          "type": "registry:component"
        }
      ]
    },
    {
      "name": "complex-component",
      "type": "registry:component",
      "title": "Complex Component",
      "description": "A complex component showing hooks, libs and components.",
      "registryDependencies": [
        "card"
      ],
      "files": [
        {
          "path": "registry/new-york/blocks/complex-component/page.tsx",
          "type": "registry:page",
          "target": "app/pokemon/page.tsx"
        },
        {
          "path": "registry/new-york/blocks/complex-component/components/pokemon-card.tsx",
          "type": "registry:component"
        },
        {
          "path": "registry/new-york/blocks/complex-component/components/pokemon-image.tsx",
          "type": "registry:component"
        },
        {
          "path": "registry/new-york/blocks/complex-component/lib/pokemon.ts",
          "type": "registry:lib"
        },
        {
          "path": "registry/new-york/blocks/complex-component/hooks/use-pokemon.ts",
          "type": "registry:hook"
        }
      ]
    },
    {
      "name": "example-with-css",
      "type": "registry:component",
      "title": "Example with CSS",
      "description": "A login form with a CSS file.",
      "files": [
        {
          "path": "registry/new-york/blocks/example-with-css/example-card.tsx",
          "type": "registry:component"
        },
        {
          "path": "registry/new-york/blocks/example-with-css/example-card.css",
          "type": "registry:component"
        }
      ]
    }
  ]
}
