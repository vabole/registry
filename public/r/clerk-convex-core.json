{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "clerk-convex-core",
  "type": "registry:block",
  "title": "Clerk + Convex Core",
  "description": "Minimal Convex backend and Clerk authentication wiring with neutral styling.",
  "dependencies": [
    "@clerk/nextjs",
    "convex",
    "convex-helpers"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/new-york/blocks/clerk-convex-core/app/layout.tsx",
      "type": "registry:page",
      "target": "app/layout.tsx",
      "content": "import type { Metadata } from \"next\";\nimport { ClerkProvider } from \"@clerk/nextjs\";\nimport ConvexClientProvider from \"@/components/convex-client-provider\";\nimport \"./globals.css\";\n\nexport const metadata: Metadata = {\n  title: \"Clerk + Convex Core\",\n  description:\n    \"Minimal Next.js wiring for Clerk authentication and Convex backend integration.\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <ClerkProvider>\n      <html lang=\"en\">\n        <body>\n          <ConvexClientProvider>{children}</ConvexClientProvider>\n        </body>\n      </html>\n    </ClerkProvider>\n  );\n}\n"
    },
    {
      "path": "registry/new-york/blocks/clerk-convex-core/app/page.tsx",
      "type": "registry:page",
      "target": "app/page.tsx",
      "content": "'use client'\n\nimport {\n  SignInButton,\n  SignedIn,\n  SignedOut,\n  SignOutButton,\n  useUser,\n} from '@clerk/nextjs'\nimport { useConvexAuth, useMutation, useQuery } from 'convex/react'\nimport { api } from '@/convex/_generated/api'\nimport { FormEvent, useEffect, useMemo, useState } from 'react'\n\nconst containerStyle: React.CSSProperties = {\n  maxWidth: '720px',\n  margin: '0 auto',\n  padding: '3rem 1.5rem',\n  display: 'flex',\n  flexDirection: 'column',\n  gap: '2rem',\n}\n\nconst cardStyle: React.CSSProperties = {\n  borderRadius: '18px',\n  border: '1px solid rgba(17, 17, 17, 0.08)',\n  backgroundColor: '#fff',\n  padding: '1.75rem',\n  boxShadow: '0 8px 24px rgba(0, 0, 0, 0.08)',\n}\n\nconst headingStyle: React.CSSProperties = {\n  margin: 0,\n  fontSize: '1.75rem',\n  fontWeight: 700,\n  lineHeight: 1.25,\n}\n\nconst mutedStyle: React.CSSProperties = {\n  margin: '0.75rem 0 0',\n  color: '#555',\n  lineHeight: 1.6,\n}\n\nconst buttonStyle: React.CSSProperties = {\n  borderRadius: '9999px',\n  border: 'none',\n  backgroundColor: '#111',\n  color: '#fff',\n  padding: '0.6rem 1.25rem',\n  fontSize: '0.95rem',\n  fontWeight: 600,\n  cursor: 'pointer',\n}\n\nconst secondaryButtonStyle: React.CSSProperties = {\n  ...buttonStyle,\n  backgroundColor: '#fff',\n  color: '#111',\n  border: '1px solid rgba(17, 17, 17, 0.1)',\n}\n\nexport default function Home() {\n  const { isAuthenticated, isLoading } = useConvexAuth()\n  const ensureUser = useMutation(api.users.ensure)\n  const sendMessage = useMutation(api.messages.send)\n  const { user } = useUser()\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      void ensureUser({})\n    }\n  }, [ensureUser, isAuthenticated])\n\n  const myMessages = useQuery(\n    api.messages.getForCurrentUser,\n    isAuthenticated ? {} : 'skip'\n  )\n  const recentMessages = useQuery(api.messages.list)\n\n  const [messageText, setMessageText] = useState('')\n  const canSend = useMemo(\n    () => Boolean(messageText.trim()) && isAuthenticated,\n    [messageText, isAuthenticated]\n  )\n\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n    if (!canSend) return\n    await sendMessage({ body: messageText.trim() })\n    setMessageText('')\n  }\n\n  const signedInName =\n    user?.fullName ??\n    user?.primaryEmailAddress?.emailAddress ??\n    user?.username ??\n    user?.emailAddresses?.[0]?.emailAddress ??\n    'your Clerk user'\n\n  return (\n    <main style={containerStyle}>\n      <section style={cardStyle}>\n        <h1 style={headingStyle}>Clerk + Convex Core</h1>\n        <p style={mutedStyle}>\n          This minimal setup keeps a friendly landing experience while wiring Clerk\n          authentication to a Convex backend. Sign in to create and view realtime\n          messages. Add your own UI framework later \u2014 the authentication and data\n          plumbing is already ready.\n        </p>\n\n        <SignedOut>\n          <div style={{ display: 'flex', gap: '0.75rem', alignItems: 'center' }}>\n            <SignInButton mode=\"modal\">\n              <button type=\"button\" style={buttonStyle}>\n                Sign in\n              </button>\n            </SignInButton>\n            <span style={{ color: '#555', fontSize: '0.9rem' }}>\n              We&apos;ll keep you on this page until you decide to authenticate.\n            </span>\n          </div>\n        </SignedOut>\n\n        <SignedIn>\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n              gap: '0.75rem',\n            }}\n          >\n            <p style={{ margin: 0, fontSize: '0.95rem' }}>\n              Signed in as <strong>{signedInName}</strong>\n            </p>\n            <div style={{ display: 'flex', gap: '0.75rem', flexWrap: 'wrap' }}>\n              <SignOutButton signOutOptions={{ redirectUrl: '/' }}>\n                <button type=\"button\" style={secondaryButtonStyle}>\n                  Sign out\n                </button>\n              </SignOutButton>\n            </div>\n          </div>\n        </SignedIn>\n      </section>\n\n      <SignedIn>\n        <ConvexConnectionState\n          isLoading={isLoading}\n          isAuthenticated={isAuthenticated}\n        />\n\n        <section style={{ ...cardStyle, display: 'flex', flexDirection: 'column', gap: '1.25rem' }}>\n          <header>\n            <h2 style={{ ...headingStyle, fontSize: '1.35rem' }}>Create a message</h2>\n            <p style={mutedStyle}>\n              This mutation writes to Convex using your authenticated Clerk identity.\n            </p>\n          </header>\n\n          <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column', gap: '0.75rem' }}>\n            <label htmlFor=\"message\" style={{ fontWeight: 600 }}>\n              Message\n            </label>\n            <input\n              id=\"message\"\n              type=\"text\"\n              value={messageText}\n              onChange={(event) => setMessageText(event.target.value)}\n              placeholder=\"Type something...\"\n              style={{\n                padding: '0.75rem 1rem',\n                borderRadius: '12px',\n                border: '1px solid rgba(17, 17, 17, 0.12)',\n                fontSize: '0.95rem',\n              }}\n            />\n            <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n              <button\n                type=\"submit\"\n                disabled={!canSend}\n                style={{\n                  ...buttonStyle,\n                  opacity: canSend ? 1 : 0.5,\n                  cursor: canSend ? 'pointer' : 'not-allowed',\n                }}\n              >\n                Save to Convex\n              </button>\n            </div>\n          </form>\n        </section>\n\n        <section style={{ display: 'flex', flexDirection: 'column', gap: '1.5rem' }}>\n          <article style={cardStyle}>\n            <header>\n              <h2 style={{ ...headingStyle, fontSize: '1.35rem' }}>Your messages</h2>\n              <p style={mutedStyle}>\n                These results come from the authenticated query{' '}\n                <code>messages.getForCurrentUser</code>.\n              </p>\n            </header>\n            <MessageList\n              emptyLabel=\"No personal messages yet. Create one above.\"\n              messages={myMessages ?? []}\n            />\n          </article>\n\n          <article style={cardStyle}>\n            <header>\n              <h2 style={{ ...headingStyle, fontSize: '1.35rem' }}>Latest messages</h2>\n              <p style={mutedStyle}>\n                Everyone signed in through Clerk can see this list update in realtime.\n              </p>\n            </header>\n            <MessageList\n              emptyLabel=\"No messages have been created yet.\"\n              messages={recentMessages ?? []}\n            />\n          </article>\n        </section>\n      </SignedIn>\n    </main>\n  )\n}\n\ntype ConvexAuthStateProps = {\n  isAuthenticated: boolean\n  isLoading: boolean\n}\n\nfunction ConvexConnectionState({ isAuthenticated, isLoading }: ConvexAuthStateProps) {\n  if (isLoading) {\n    return (\n      <section style={{ ...cardStyle, backgroundColor: '#111', color: '#fff' }}>\n        <p style={{ margin: 0 }}>Checking Convex session\u2026</p>\n      </section>\n    )\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <section style={cardStyle}>\n        <p style={{ ...mutedStyle, margin: 0 }}>\n          Convex is waiting for a verified Clerk JWT. Confirm you have set{' '}\n          <code>CLERK_JWT_ISSUER_DOMAIN</code>, synced <code>convex/auth.config.js</code> with{' '}\n          <code>pnpx convex dev</code>, and configured your Clerk JWT template with{' '}\n          <code>{`\"aud\": \"convex\"`}</code>.\n        </p>\n      </section>\n    )\n  }\n\n  return (\n    <section style={{ ...cardStyle, borderColor: 'rgba(12, 131, 91, 0.2)', backgroundColor: '#d3f9e2' }}>\n      <p style={{ margin: 0, color: '#0c835b', fontWeight: 600 }}>\n        Convex is authenticated. Your Clerk account can now call queries and mutations.\n      </p>\n    </section>\n  )\n}\n\ntype MessageListProps = {\n  messages: Array<{\n    _id: string\n    body: string\n    authorName?: string | null\n  }>\n  emptyLabel: string\n}\n\nfunction MessageList({ messages, emptyLabel }: MessageListProps) {\n  if (messages.length === 0) {\n    return <p style={mutedStyle}>{emptyLabel}</p>\n  }\n\n  return (\n    <ul style={{ listStyle: 'none', padding: 0, margin: 0, display: 'flex', flexDirection: 'column', gap: '0.75rem' }}>\n      {messages.map((message) => (\n        <li\n          key={message._id}\n          style={{\n            padding: '0.9rem 1rem',\n            borderRadius: '14px',\n            border: '1px solid rgba(17, 17, 17, 0.08)',\n            backgroundColor: '#faf9f8',\n          }}\n        >\n          <p style={{ margin: 0, fontSize: '0.95rem' }}>{message.body}</p>\n          <p style={{ margin: '0.45rem 0 0', color: '#666', fontSize: '0.75rem' }}>\n            Posted by {message.authorName ?? 'Unknown user'}\n          </p>\n        </li>\n      ))}\n    </ul>\n  )\n}\n"
    },
    {
      "path": "registry/new-york/blocks/clerk-convex-core/app/globals.css",
      "type": "registry:file",
      "target": "app/globals.css",
      "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\nbody {\n  margin: 0;\n  background-color: #f5f5f5;\n  color: #111;\n  font-family: system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", sans-serif;\n}\n\nbutton {\n  font-family: inherit;\n}\n"
    },
    {
      "path": "registry/new-york/blocks/clerk-convex-core/convex-client-provider.tsx",
      "type": "registry:component",
      "target": "components/convex-client-provider.tsx",
      "content": "'use client'\n\nimport { ReactNode } from 'react'\nimport { ConvexReactClient } from 'convex/react'\nimport { ConvexProviderWithClerk } from 'convex/react-clerk'\nimport { useAuth } from '@clerk/nextjs'\n\nif (!process.env.NEXT_PUBLIC_CONVEX_URL) {\n  throw new Error('Missing NEXT_PUBLIC_CONVEX_URL in your .env file')\n}\n\nconst convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL)\n\nexport default function ConvexClientProvider({ children }: { children: ReactNode }) {\n  return (\n    <ConvexProviderWithClerk client={convex} useAuth={useAuth}>\n      {children}\n    </ConvexProviderWithClerk>\n  )\n}\n"
    },
    {
      "path": "registry/new-york/blocks/clerk-convex-core/convex/auth.config.js",
      "type": "registry:file",
      "target": "convex/auth.config.js",
      "content": "export default {\n  providers: [\n    {\n      domain: process.env.CLERK_JWT_ISSUER_DOMAIN,\n      applicationID: 'convex',\n    },\n  ],\n}\n"
    },
    {
      "path": "registry/new-york/blocks/clerk-convex-core/convex/schema.ts",
      "type": "registry:file",
      "target": "convex/schema.ts",
      "content": "import { defineSchema, defineTable } from 'convex/server'\nimport { v } from 'convex/values'\n\nexport default defineSchema({\n  users: defineTable({\n    clerkId: v.string(),\n    email: v.optional(v.string()),\n    name: v.optional(v.string()),\n    imageUrl: v.optional(v.string()),\n  }).index('by_clerkId', ['clerkId']),\n  messages: defineTable({\n    body: v.string(),\n    authorId: v.string(),\n    authorName: v.optional(v.string()),\n  }).index('by_authorId', ['authorId']),\n})\n"
    },
    {
      "path": "registry/new-york/blocks/clerk-convex-core/convex/messages.ts",
      "type": "registry:file",
      "target": "convex/messages.ts",
      "content": "import { v } from 'convex/values'\nimport { query, mutation } from './_generated/server'\n\nexport const getForCurrentUser = query({\n  args: {},\n  handler: async (ctx) => {\n    const identity = await ctx.auth.getUserIdentity()\n    if (!identity) {\n      throw new Error('Not authenticated')\n    }\n\n    return await ctx.db\n      .query('messages')\n      .withIndex('by_authorId', (q) => q.eq('authorId', identity.subject))\n      .order('desc')\n      .take(100)\n  },\n})\n\nexport const send = mutation({\n  args: { body: v.string() },\n  handler: async (ctx, args) => {\n    const identity = await ctx.auth.getUserIdentity()\n    if (!identity) {\n      throw new Error('Not authenticated')\n    }\n\n    const userRecord = await ctx.db\n      .query('users')\n      .withIndex('by_clerkId', (q) => q.eq('clerkId', identity.subject))\n      .unique()\n\n    const composedName = [identity.givenName, identity.familyName]\n      .filter((part): part is string => Boolean(part?.trim()))\n      .join(' ')\n      .trim()\n\n    const authorName =\n      userRecord?.name ??\n      identity.name?.trim() ??\n      (composedName || undefined) ??\n      identity.email ??\n      'Anonymous'\n\n    await ctx.db.insert('messages', {\n      body: args.body,\n      authorId: identity.subject,\n      authorName,\n    })\n  },\n})\n\nexport const list = query({\n  args: {},\n  handler: async (ctx) => {\n    return await ctx.db.query('messages').order('desc').take(100)\n  },\n})\n"
    },
    {
      "path": "registry/new-york/blocks/clerk-convex-core/convex/users.ts",
      "type": "registry:file",
      "target": "convex/users.ts",
      "content": "import { mutation } from './_generated/server'\n\nexport const ensure = mutation({\n  args: {},\n  handler: async (ctx) => {\n    const identity = await ctx.auth.getUserIdentity()\n    if (!identity) {\n      throw new Error('Not authenticated')\n    }\n\n    const nameFromIdentity = identity.name?.trim()\n    const composedName = [identity.givenName, identity.familyName]\n      .filter((part): part is string => Boolean(part?.trim()))\n      .join(' ')\n      .trim()\n    const fallbackName = identity.email ?? identity.subject\n    const displayName = nameFromIdentity || composedName || fallbackName\n\n    const userData = {\n      clerkId: identity.subject,\n      email: identity.email ?? undefined,\n      name: displayName,\n      imageUrl: identity.pictureUrl ?? undefined,\n    }\n\n    const existing = await ctx.db\n      .query('users')\n      .withIndex('by_clerkId', (q) => q.eq('clerkId', identity.subject))\n      .unique()\n\n    if (!existing) {\n      await ctx.db.insert('users', userData)\n      return\n    }\n\n    await ctx.db.patch(existing._id, userData)\n  },\n})\n"
    },
    {
      "path": "registry/new-york/blocks/clerk-convex-core/convex/tsconfig.json",
      "type": "registry:file",
      "target": "convex/tsconfig.json",
      "content": "{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"module\": \"ES2022\",\n    \"moduleResolution\": \"Bundler\",\n    \"paths\": {\n      \"@/*\": [\"../*\"]\n    }\n  },\n  \"include\": [\".\"]\n}\n"
    },
    {
      "path": "registry/new-york/blocks/clerk-convex-core/env.example",
      "type": "registry:file",
      "target": ".env.example",
      "content": "# Clerk Authentication\n# Get these from https://dashboard.clerk.com\nNEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_...\nCLERK_SECRET_KEY=sk_test_...\n\n# Clerk JWT issuer domain (from the Convex-specific JWT template)\n# In development: https://verb-noun-00.clerk.accounts.dev\n# In production: https://clerk.<your-domain>.com\nCLERK_JWT_ISSUER_DOMAIN=https://your-app.clerk.accounts.dev\n\n# Convex requires the Clerk JWT template audience to be \"convex\"\n# Set this when configuring your Clerk JWT template:\n# {\n#   \"aud\": \"convex\"\n# }\n\n# Convex\n# Get this from https://dashboard.convex.dev\nNEXT_PUBLIC_CONVEX_URL=https://your-deployment.convex.cloud\n"
    },
    {
      "path": "registry/new-york/blocks/clerk-convex-core/middleware.ts",
      "type": "registry:file",
      "target": "middleware.ts",
      "content": "import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server'\n\nconst isPublicRoute = createRouteMatcher(['/sign-in(.*)', '/sign-up(.*)'])\n\nexport default clerkMiddleware(async (auth, request) => {\n  if (!isPublicRoute(request)) {\n    await auth.protect()\n  }\n})\n\nexport const config = {\n  matcher: [\n    // Skip Next.js internals and all static files, unless found in search params\n    '/((?!_next|[^?]*\\\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',\n    // Always run for API routes\n    '/(api|trpc)(.*)',\n  ],\n}\n"
    }
  ],
  "envVars": {
    "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY": "pk_test_...",
    "CLERK_SECRET_KEY": "sk_test_...",
    "CLERK_JWT_ISSUER_DOMAIN": "https://your-app.clerk.accounts.dev",
    "NEXT_PUBLIC_CONVEX_URL": "https://your-deployment.convex.cloud"
  },
  "docs": "https://docs.convex.dev/auth/clerk"
}
