{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "clerk-convex-starter",
  "type": "registry:block",
  "title": "Clerk + Convex Starter",
  "description": "One-step Clerk authentication and Convex backend setup with a polished landing experience.",
  "dependencies": [
    "@clerk/nextjs",
    "convex",
    "convex-helpers",
    "tailwindcss",
    "@tailwindcss/postcss",
    "postcss",
    "autoprefixer",
    "tw-animate-css"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/new-york/blocks/clerk-convex-starter/app/layout.tsx",
      "type": "registry:page",
      "target": "app/layout.tsx",
      "content": "import type { Metadata } from \"next\";\nimport { Geist, Geist_Mono } from \"next/font/google\";\nimport { ClerkProvider } from \"@clerk/nextjs\";\nimport ConvexClientProvider from \"@/components/convex-client-provider\";\nimport \"./globals.css\";\n\nconst geistSans = Geist({\n  variable: \"--font-geist-sans\",\n  subsets: [\"latin\"],\n});\n\nconst geistMono = Geist_Mono({\n  variable: \"--font-geist-mono\",\n  subsets: [\"latin\"],\n});\n\nexport const metadata: Metadata = {\n  title: \"Clerk + Convex Starter\",\n  description: \"A Next.js app with Clerk authentication and Convex backend\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body\n        className={`${geistSans.variable} ${geistMono.variable} antialiased`}\n      >\n        <ClerkProvider>\n          <ConvexClientProvider>{children}</ConvexClientProvider>\n        </ClerkProvider>\n      </body>\n    </html>\n  );\n}\n"
    },
    {
      "path": "registry/new-york/blocks/clerk-convex-starter/app/page.tsx",
      "type": "registry:page",
      "target": "app/page.tsx",
      "content": "'use client'\n\nimport {\n  SignInButton,\n  SignedIn,\n  SignedOut,\n  SignOutButton,\n  UserButton,\n  useUser,\n} from '@clerk/nextjs'\nimport { useConvexAuth, useQuery, useMutation } from 'convex/react'\nimport { api } from '@/convex/_generated/api'\nimport { FormEvent, useEffect, useMemo, useState } from 'react'\n\nexport default function Home() {\n  const { isAuthenticated, isLoading } = useConvexAuth()\n  const ensureUser = useMutation(api.users.ensure)\n  const sendMessage = useMutation(api.messages.send)\n  const { user } = useUser()\n  const signedInName =\n    user?.fullName ??\n    user?.username ??\n    user?.primaryEmailAddress?.emailAddress ??\n    user?.emailAddresses?.[0]?.emailAddress ??\n    'your Clerk user'\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      void ensureUser({})\n    }\n  }, [ensureUser, isAuthenticated])\n\n  const myMessages = useQuery(\n    api.messages.getForCurrentUser,\n    isAuthenticated ? {} : 'skip'\n  )\n  const recentMessages = useQuery(api.messages.list)\n\n  const [messageText, setMessageText] = useState('')\n  const canSend = useMemo(\n    () => Boolean(messageText.trim()) && isAuthenticated,\n    [messageText, isAuthenticated]\n  )\n\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n    if (!canSend) return\n    await sendMessage({ body: messageText.trim() })\n    setMessageText('')\n  }\n\n  return (\n    <main className=\"mx-auto flex w-full max-w-5xl flex-col gap-10 px-4 py-12\">\n      <section className=\"rounded-3xl border bg-card px-6 py-12 shadow-sm sm:px-10\">\n        <div className=\"flex flex-col gap-8 md:flex-row md:items-center md:justify-between\">\n          <header className=\"max-w-2xl space-y-4\">\n            <p className=\"text-sm font-semibold uppercase tracking-wide text-primary\">\n              Starter Template\n            </p>\n            <div className=\"space-y-3\">\n              <h1 className=\"text-3xl font-bold tracking-tight sm:text-4xl\">\n                Launch faster with Clerk auth & Convex realtime data\n              </h1>\n              <p className=\"text-base text-muted-foreground\">\n                A minimal example that keeps you on the landing page until you choose\n                to sign in. Connect Clerk and Convex, then build the rest of your app\n                on top of a working authentication + backend loop.\n              </p>\n            </div>\n          </header>\n\n          <div className=\"flex flex-col gap-4\">\n            <SignedOut>\n              <SignInButton mode=\"modal\">\n                <button className=\"rounded-md bg-primary px-5 py-2 text-sm font-semibold text-primary-foreground shadow transition hover:bg-primary/90\">\n                  Sign in to try it\n                </button>\n              </SignInButton>\n            </SignedOut>\n            <SignedIn>\n              <div className=\"flex flex-col items-start gap-3\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Signed in as{' '}\n                  <span className=\"font-medium text-foreground\">{signedInName}</span>\n                </p>\n                <div className=\"flex items-center gap-3\">\n                  <UserButton afterSignOutUrl=\"/\" appearance={{ variables: { borderRadius: '0.75rem' } }} />\n                  <SignOutButton signOutOptions={{ redirectUrl: '/' }}>\n                    <button className=\"rounded-md border border-input px-4 py-2 text-sm font-semibold text-foreground shadow-sm transition hover:bg-muted\">\n                      Sign out\n                    </button>\n                  </SignOutButton>\n                </div>\n              </div>\n            </SignedIn>\n          </div>\n        </div>\n\n        <div className=\"mt-10 grid gap-4 md:grid-cols-3\">\n          {[\n            {\n              title: 'Keep users in context',\n              body: 'Show a marketing-friendly landing page until they choose to authenticate with Clerk.',\n            },\n            {\n              title: 'Realtime Convex data',\n              body: 'Use authenticated queries and mutations out of the box, including a user record sync.',\n            },\n            {\n              title: 'Clear next steps',\n              body: 'Environment variable hints and links to both Clerk and Convex docs keep setup predictable.',\n            },\n          ].map((feature) => (\n            <div key={feature.title} className=\"rounded-2xl border bg-muted/30 p-5\">\n              <h3 className=\"text-sm font-semibold text-foreground\">{feature.title}</h3>\n              <p className=\"mt-2 text-sm text-muted-foreground\">{feature.body}</p>\n            </div>\n          ))}\n        </div>\n      </section>\n\n      <SignedIn>\n        <section className=\"rounded-3xl border bg-card p-6 shadow-sm\">\n          <ConvexConnectionState\n            isLoading={isLoading}\n            isAuthenticated={isAuthenticated}\n          />\n        </section>\n\n        <section className=\"grid gap-6 md:grid-cols-2\">\n          <article className=\"rounded-xl border bg-card p-6 shadow-sm\">\n            <header className=\"mb-4 space-y-1\">\n              <h2 className=\"text-xl font-semibold\">Create a message</h2>\n              <p className=\"text-sm text-muted-foreground\">\n                This mutation writes to Convex using your authenticated user\n                record.\n              </p>\n            </header>\n\n            <form onSubmit={handleSubmit} className=\"flex flex-col gap-3\">\n              <label className=\"text-sm font-medium text-muted-foreground\" htmlFor=\"message\">\n                Message\n              </label>\n              <input\n                id=\"message\"\n                type=\"text\"\n                value={messageText}\n                onChange={(event) => setMessageText(event.target.value)}\n                placeholder=\"Type a short noteâ€¦\"\n                className=\"rounded-md border px-3 py-2 text-sm shadow-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\"\n              />\n              <div className=\"flex justify-end\">\n                <button\n                  type=\"submit\"\n                  disabled={!canSend}\n                  className=\"inline-flex items-center rounded-md bg-primary px-4 py-2 text-sm font-medium text-primary-foreground shadow hover:bg-primary/90 disabled:cursor-not-allowed disabled:opacity-60\"\n                >\n                  Save to Convex\n                </button>\n              </div>\n            </form>\n          </article>\n\n          <article className=\"rounded-xl border bg-card p-6 shadow-sm\">\n            <header className=\"mb-4 space-y-1\">\n              <h2 className=\"text-xl font-semibold\">Your messages</h2>\n              <p className=\"text-sm text-muted-foreground\">\n                These results come from the authenticated query{' '}\n                <code className=\"rounded bg-muted px-1 py-0.5 text-xs\">\n                  messages.getForCurrentUser\n                </code>\n                .\n              </p>\n            </header>\n            <MessageList\n              emptyLabel=\"No personal messages yet. Create one above.\"\n              messages={myMessages ?? []}\n            />\n          </article>\n\n          <article className=\"rounded-xl border bg-card p-6 shadow-sm md:col-span-2\">\n            <header className=\"mb-4 space-y-1\">\n              <h2 className=\"text-xl font-semibold\">Latest messages</h2>\n              <p className=\"text-sm text-muted-foreground\">\n                Everyone signed in through Clerk can see this list update in\n                realtime through Convex.\n              </p>\n            </header>\n            <MessageList\n              emptyLabel=\"No messages have been created yet.\"\n              messages={recentMessages ?? []}\n            />\n          </article>\n        </section>\n      </SignedIn>\n    </main>\n  )\n}\n\ntype ConvexAuthStateProps = {\n  isAuthenticated: boolean\n  isLoading: boolean\n}\n\nfunction ConvexConnectionState({ isAuthenticated, isLoading }: ConvexAuthStateProps) {\n  if (isLoading) {\n    return (\n      <div className=\"rounded-lg border bg-muted/40 p-4 text-sm text-muted-foreground\">\n        Checking Convex sessionâ€¦\n      </div>\n    )\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"rounded-lg border bg-muted/40 p-4 text-sm text-muted-foreground\">\n        Convex is waiting for a verified Clerk JWT. Confirm you have set{' '}\n        <code className=\"rounded bg-muted px-1 py-0.5 text-xs\">CLERK_JWT_ISSUER_DOMAIN</code>{' '}\n        and synced <code className=\"rounded bg-muted px-1 py-0.5 text-xs\">convex/auth.config.js</code>{' '}\n        with <code className=\"rounded bg-muted px-1 py-0.5 text-xs\">pnpx convex dev</code>, and that your Clerk JWT template includes{' '}\n        <code className=\"rounded bg-muted px-1 py-0.5 text-xs\">{`\"aud\": \"convex\"`}</code>.\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"rounded-lg border bg-emerald-500/10 p-4 text-sm font-medium text-emerald-900 dark:text-emerald-200\">\n      Convex is authenticated. Your Clerk account can now call queries and mutations.\n    </div>\n  )\n}\n\ntype MessageListProps = {\n  messages: Array<{\n    _id: string\n    body: string\n    authorName?: string | null\n  }>\n  emptyLabel: string\n}\n\nfunction MessageList({ messages, emptyLabel }: MessageListProps) {\n  if (messages.length === 0) {\n    return <p className=\"text-sm text-muted-foreground\">{emptyLabel}</p>\n  }\n\n  return (\n    <ul className=\"space-y-3\">\n      {messages.map((message) => (\n        <li key={message._id} className=\"rounded-lg border bg-background p-3 shadow-sm\">\n          <p className=\"text-sm text-foreground\">{message.body}</p>\n          <p className=\"mt-2 text-xs text-muted-foreground\">\n            Posted by {message.authorName ?? 'Unknown user'}\n          </p>\n        </li>\n      ))}\n    </ul>\n  )\n}\n"
    },
    {
      "path": "registry/new-york/blocks/clerk-convex-starter/app/globals.css",
      "type": "registry:file",
      "target": "app/globals.css",
      "content": "@import \"tailwindcss\";\n@import \"tw-animate-css\";\n\n@custom-variant dark (&:is(.dark *));\n\n@theme inline {\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --font-sans: var(--font-geist-sans);\n  --font-mono: var(--font-geist-mono);\n  --color-sidebar-ring: var(--sidebar-ring);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar: var(--sidebar);\n  --color-chart-5: var(--chart-5);\n  --color-chart-4: var(--chart-4);\n  --color-chart-3: var(--chart-3);\n  --color-chart-2: var(--chart-2);\n  --color-chart-1: var(--chart-1);\n  --color-ring: var(--ring);\n  --color-input: var(--input);\n  --color-border: var(--border);\n  --color-destructive: var(--destructive);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-accent: var(--accent);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-muted: var(--muted);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-secondary: var(--secondary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-primary: var(--primary);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-popover: var(--popover);\n  --color-card-foreground: var(--card-foreground);\n  --color-card: var(--card);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n}\n\n:root {\n  --radius: 0.625rem;\n  --background: oklch(1 0 0);\n  --foreground: oklch(0.145 0 0);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.145 0 0);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.145 0 0);\n  --primary: oklch(0.205 0 0);\n  --primary-foreground: oklch(0.985 0 0);\n  --secondary: oklch(0.97 0 0);\n  --secondary-foreground: oklch(0.205 0 0);\n  --muted: oklch(0.97 0 0);\n  --muted-foreground: oklch(0.556 0 0);\n  --accent: oklch(0.97 0 0);\n  --accent-foreground: oklch(0.205 0 0);\n  --destructive: oklch(0.577 0.245 27.325);\n  --border: oklch(0.922 0 0);\n  --input: oklch(0.922 0 0);\n  --ring: oklch(0.708 0 0);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.145 0 0);\n  --sidebar-primary: oklch(0.205 0 0);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.97 0 0);\n  --sidebar-accent-foreground: oklch(0.205 0 0);\n  --sidebar-border: oklch(0.922 0 0);\n  --sidebar-ring: oklch(0.708 0 0);\n}\n\n.dark {\n  --background: oklch(0.145 0 0);\n  --foreground: oklch(0.985 0 0);\n  --card: oklch(0.205 0 0);\n  --card-foreground: oklch(0.985 0 0);\n  --popover: oklch(0.205 0 0);\n  --popover-foreground: oklch(0.985 0 0);\n  --primary: oklch(0.922 0 0);\n  --primary-foreground: oklch(0.205 0 0);\n  --secondary: oklch(0.269 0 0);\n  --secondary-foreground: oklch(0.985 0 0);\n  --muted: oklch(0.269 0 0);\n  --muted-foreground: oklch(0.708 0 0);\n  --accent: oklch(0.269 0 0);\n  --accent-foreground: oklch(0.985 0 0);\n  --destructive: oklch(0.704 0.191 22.216);\n  --border: oklch(1 0 0 / 10%);\n  --input: oklch(1 0 0 / 15%);\n  --ring: oklch(0.556 0 0);\n  --chart-1: oklch(0.488 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.205 0 0);\n  --sidebar-foreground: oklch(0.985 0 0);\n  --sidebar-primary: oklch(0.488 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.269 0 0);\n  --sidebar-accent-foreground: oklch(0.985 0 0);\n  --sidebar-border: oklch(1 0 0 / 10%);\n  --sidebar-ring: oklch(0.556 0 0);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n"
    },
    {
      "path": "registry/new-york/blocks/clerk-convex-starter/components/convex-client-provider.tsx",
      "type": "registry:component",
      "target": "components/convex-client-provider.tsx",
      "content": "'use client'\n\nimport { ReactNode } from 'react'\nimport { ConvexReactClient } from 'convex/react'\nimport { ConvexProviderWithClerk } from 'convex/react-clerk'\nimport { useAuth } from '@clerk/nextjs'\n\nif (!process.env.NEXT_PUBLIC_CONVEX_URL) {\n  throw new Error('Missing NEXT_PUBLIC_CONVEX_URL in your .env file')\n}\n\nconst convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL)\n\nexport default function ConvexClientProvider({ children }: { children: ReactNode }) {\n  return (\n    <ConvexProviderWithClerk client={convex} useAuth={useAuth}>\n      {children}\n    </ConvexProviderWithClerk>\n  )\n}\n"
    },
    {
      "path": "registry/new-york/blocks/clerk-convex-starter/convex/auth.config.js",
      "type": "registry:file",
      "target": "convex/auth.config.js",
      "content": "export default {\n  providers: [\n    {\n      domain: process.env.CLERK_JWT_ISSUER_DOMAIN,\n      applicationID: 'convex',\n    },\n  ],\n}\n"
    },
    {
      "path": "registry/new-york/blocks/clerk-convex-starter/convex/schema.ts",
      "type": "registry:file",
      "target": "convex/schema.ts",
      "content": "import { defineSchema, defineTable } from 'convex/server'\nimport { v } from 'convex/values'\n\nexport default defineSchema({\n  users: defineTable({\n    clerkId: v.string(),\n    email: v.optional(v.string()),\n    name: v.optional(v.string()),\n    imageUrl: v.optional(v.string()),\n  }).index('by_clerkId', ['clerkId']),\n  messages: defineTable({\n    body: v.string(),\n    authorId: v.string(),\n    authorName: v.optional(v.string()),\n  }).index('by_authorId', ['authorId']),\n})\n"
    },
    {
      "path": "registry/new-york/blocks/clerk-convex-starter/convex/messages.ts",
      "type": "registry:file",
      "target": "convex/messages.ts",
      "content": "import { v } from 'convex/values'\nimport { query, mutation } from './_generated/server'\n\nexport const getForCurrentUser = query({\n  args: {},\n  handler: async (ctx) => {\n    const identity = await ctx.auth.getUserIdentity()\n    if (!identity) {\n      throw new Error('Not authenticated')\n    }\n\n    return await ctx.db\n      .query('messages')\n      .withIndex('by_authorId', (q) => q.eq('authorId', identity.subject))\n      .order('desc')\n      .take(100)\n  },\n})\n\nexport const send = mutation({\n  args: { body: v.string() },\n  handler: async (ctx, args) => {\n    const identity = await ctx.auth.getUserIdentity()\n    if (!identity) {\n      throw new Error('Not authenticated')\n    }\n\n    const userRecord = await ctx.db\n      .query('users')\n      .withIndex('by_clerkId', (q) => q.eq('clerkId', identity.subject))\n      .unique()\n\n    const composedName = [identity.givenName, identity.familyName]\n      .filter((part): part is string => Boolean(part?.trim()))\n      .join(' ')\n      .trim()\n\n    const authorName =\n      userRecord?.name ??\n      identity.name?.trim() ??\n      (composedName || undefined) ??\n      identity.email ??\n      'Anonymous'\n\n    await ctx.db.insert('messages', {\n      body: args.body,\n      authorId: identity.subject,\n      authorName,\n    })\n  },\n})\n\nexport const list = query({\n  args: {},\n  handler: async (ctx) => {\n    return await ctx.db.query('messages').order('desc').take(100)\n  },\n})\n"
    },
    {
      "path": "registry/new-york/blocks/clerk-convex-starter/convex/users.ts",
      "type": "registry:file",
      "target": "convex/users.ts",
      "content": "import { mutation } from './_generated/server'\n\nexport const ensure = mutation({\n  args: {},\n  handler: async (ctx) => {\n    const identity = await ctx.auth.getUserIdentity()\n    if (!identity) {\n      throw new Error('Not authenticated')\n    }\n\n    const nameFromIdentity = identity.name?.trim()\n    const composedName = [identity.givenName, identity.familyName]\n      .filter((part): part is string => Boolean(part?.trim()))\n      .join(' ')\n      .trim()\n    const fallbackName = identity.email ?? identity.subject\n    const displayName = nameFromIdentity || composedName || fallbackName\n\n    const userData = {\n      clerkId: identity.subject,\n      email: identity.email ?? undefined,\n      name: displayName,\n      imageUrl: identity.pictureUrl ?? undefined,\n    }\n\n    const existing = await ctx.db\n      .query('users')\n      .withIndex('by_clerkId', (q) => q.eq('clerkId', identity.subject))\n      .unique()\n\n    if (!existing) {\n      await ctx.db.insert('users', userData)\n      return\n    }\n\n    await ctx.db.patch(existing._id, userData)\n  },\n})\n"
    },
    {
      "path": "registry/new-york/blocks/clerk-convex-starter/convex/tsconfig.json",
      "type": "registry:file",
      "target": "convex/tsconfig.json",
      "content": "{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"module\": \"ES2022\",\n    \"moduleResolution\": \"Bundler\",\n    \"paths\": {\n      \"@/*\": [\"../*\"]\n    }\n  },\n  \"include\": [\".\"]\n}\n"
    },
    {
      "path": "registry/new-york/blocks/clerk-convex-starter/env.example",
      "type": "registry:file",
      "target": ".env.example",
      "content": "# Clerk Authentication\n# Get these from https://dashboard.clerk.com\nNEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_...\nCLERK_SECRET_KEY=sk_test_...\n\n# Clerk JWT issuer domain (from the Convex-specific JWT template)\n# In development: https://verb-noun-00.clerk.accounts.dev\n# In production: https://clerk.<your-domain>.com\nCLERK_JWT_ISSUER_DOMAIN=https://your-app.clerk.accounts.dev\n\n# Convex requires the Clerk JWT template audience to be \"convex\"\n# Set this when configuring your Clerk JWT template:\n# {\n#   \"aud\": \"convex\"\n# }\n\n# Convex\n# Get this from https://dashboard.convex.dev\nNEXT_PUBLIC_CONVEX_URL=https://your-deployment.convex.cloud\n"
    },
    {
      "path": "registry/new-york/blocks/clerk-convex-starter/middleware.ts",
      "type": "registry:file",
      "target": "middleware.ts",
      "content": "import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server'\n\nconst isPublicRoute = createRouteMatcher(['/sign-in(.*)', '/sign-up(.*)'])\n\nexport default clerkMiddleware(async (auth, request) => {\n  if (!isPublicRoute(request)) {\n    await auth.protect()\n  }\n})\n\nexport const config = {\n  matcher: [\n    // Skip Next.js internals and all static files, unless found in search params\n    '/((?!_next|[^?]*\\\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',\n    // Always run for API routes\n    '/(api|trpc)(.*)',\n  ],\n}\n"
    },
    {
      "path": "registry/new-york/blocks/clerk-convex-starter/postcss.config.mjs",
      "type": "registry:file",
      "target": "postcss.config.mjs",
      "content": "const config = {\n  plugins: [\"@tailwindcss/postcss\"],\n};\n\nexport default config;\n"
    }
  ],
  "envVars": {
    "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY": "pk_test_...",
    "CLERK_SECRET_KEY": "sk_test_...",
    "CLERK_JWT_ISSUER_DOMAIN": "https://your-app.clerk.accounts.dev",
    "NEXT_PUBLIC_CONVEX_URL": "https://your-deployment.convex.cloud"
  },
  "docs": "https://clerk.com/docs/guides/development/integrations/databases/convex"
}
